####################################################################
# CS:APP Proxy Lab
#
# Student Source Files
####################################################################

This directory contains the files you will need for the CS:APP Proxy
Lab.

proxy.c
csapp.h
csapp.c
    These are starter files.  csapp.c and csapp.h are described in
    your textbook. 

    You may make any changes you like to these files.  And you may
    create and handin any additional files you like.

    Please use `port-for-user.pl' or 'free-port.sh' to generate
    unique ports for your proxy or tiny server. 

Makefile
    This is the makefile that builds the proxy program.  Type "make"
    to build your solution, or "make clean" followed by "make" for a
    fresh build. 

    Type "make handin" to create the tarfile that you will be handing
    in. You can modify it any way you like. Your instructor will use your
    Makefile to build your proxy from source.

port-for-user.pl
    Generates a random port for a particular user
    usage: ./port-for-user.pl <userID>

free-port.sh
    Handy script that identifies an unused TCP port that you can use
    for your proxy or tiny. 
    usage: ./free-port.sh

driver.sh
    The autograder for Basic, and Cache.        
    usage: ./driver.sh

tiny
    Tiny Web server from the CS:APP text

A Web proxy is a program that acts as a middleman between a Web browser and anend server. Instead of contacting the end server directly to get a Web page, the browser contacts the proxy, which forwards the request on to the end server. When the end server replies to the proxy, the proxy sends the reply on to the browser.

Proxies are useful for many purposes. Sometimes proxies are used in firewalls, so that browsers behind a firewall can only contact a server beyond the firewall via the proxy. Proxies can also act as anonymizers: by stripping requests of all  identifying information, a proxy can make the browser anonymous to Web servers. Proxies can even be used to cache web objects by storing local copies of objects from servers then responding to future requests by reading them out of its cache rather than by communicating again with remote servers.

In this lab, you will write a simple HTTP proxy that caches web objects. There are three components of the lab. For the first  part of the lab, you will set up the proxy to accept incoming connections, read and parserequests, forward requests to web servers, read the servers’ responses, and forward those responses to the corresponding clients. This first part will involve learning about basic HTTP operation and how to usesockets to write programs that communicate over network connections.

In the second part, you will add simple caching to your proxy using a simple main memory cache of the most recently accessed web content.  And if a new request is requesting the same web content, you can respondwith the content from the cache without contacting the web server. You only need to worry about caching contents that is no bigger than max object size. And your cache only needs to cache the most recently requested web content (no bigger than max object size). This size limit refers to the actual web content’s size, not including the HTTP response headers.

In the third part, you will add range support to your proxy server. Range request from the client will first beconverted to whole object request to the server, and then when the proxy receives the whole object from the server, it will take only the portion of the object based on the range and add proper range related response header and send it back to the client. You only need to get range support to work for web content whose size is no bigger than max object size. For web content whose size is bigger than max object size, you canignore the range request, and just pass through the whole objects from web server to browser client.
